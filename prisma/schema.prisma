generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String       @id @default(cuid())
  createdById String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]
  chapters    Chapter[]
  category    Category?    @relation(fields: [categoryId], references: [id])
  purchases   Purchase[]
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(cuid())
  title        String
  description  String?
  videoUrl     String?
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  position     Int
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  userProgress UserProgress[]
}

model MuxData {
  id         String  @id @default(cuid())
  assetId    String
  playbackId String?
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model StripeCustomer {
  id               String   @id @default(cuid())
  userid           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Events {
  id               String        @id @default(cuid())
  title            String
  backgroundImage  String
  date             DateTime      @default(now())
  hour             DateTime      @default(now())
  local            String
  descriptionLocal String
  descriptionEvent String
  userId           String
  speaker          Speaker[]
  organization     Organization  @relation(fields: [organizationId], references: [id])
  programation     Programation?
  enrollment       Enrollment?
  organizationId   String
}

model Programation {
  id       String  @id @default(cuid())
  Events   Events? @relation(fields: [eventsId], references: [id])
  eventsId String? @unique
}

model Enrollment {
  id       String  @id @default(cuid())
  Events   Events? @relation(fields: [eventsId], references: [id])
  eventsId String? @unique
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String
  contact     String
  image       String
  Events      Events[]
}

model Speaker {
  id       String  @id @default(cuid())
  name     String
  avatar   String
  Events   Events? @relation(fields: [eventsId], references: [id])
  eventsId String?
}
